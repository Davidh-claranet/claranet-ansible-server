---
- name: install postgresql.org signing key
  ansible.builtin.apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
  tags: srv_postgres_install

- name: add postgresql.org apt repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ lin_apt_arch }}] {{ url }} {{ ansible_lsb.codename }}-pgdg main"
    filename: pgdg
    mode: 0644
    update_cache: true
  vars:
    url: http://apt.postgresql.org/pub/repos/apt/
  tags: srv_postgres_install

- name: install postgresql packages with retry
  block:
    - name: install postgresql server (will retry if fails)
      ansible.builtin.apt:
        name: "{{ packages }}"
  rescue:
    - name: install postgresql server (retry)
      ansible.builtin.apt:
        name: "{{ packages }}"
        update_cache: true
  vars:
    packages:
      - postgresql-{{ srv_pg_release }}
      - ssl-cert  # for snakeoil certificate
  tags: srv_postgres_install


- name: tune kernel for postgresql server
  ansible.posix.sysctl:
    name: net.core.somaxconn
    value: '1024'
    state: present
    sysctl_file: /etc/sysctl.d/77-postgres.conf
  with_dict: "{{ srv_pg_kernel_params }}"
  loop_control:
    label: "{{ item.key }}"
  when: allow_sysctl |bool
  notify:
    - restart postgres service
  tags: srv_postgres_sysctl


- name: grant postgres user access to letsencrypt certificate
  ansible.builtin.user:
    name: postgres
    groups: "{{ certbot_group }}"
    append: true
  when: certbot_group is defined
  notify:
    - restart postgres service
  tags: srv_postgres_ssl

- name: check that postgres ssl certificate exists
  ansible.builtin.file:
    path: "{{ srv_pg_ssl_cert }}"
    state: file
  tags: srv_postgres_ssl

## postgresql-10 server refuses to use world-readable private keys
- name: check that ssl private key exists and is not world-readable
  ansible.builtin.file:
    path: "{{ srv_pg_ssl_key }}"
    state: file
    group: "{{ certbot_group |d('ssl-cert') }}"
    mode: 'o='
  tags: srv_postgres_ssl

- name: ensure that ssl unix group can accces private key directory
  ansible.builtin.file:
    path: "{{ srv_pg_ssl_key |dirname }}"
    state: directory
    group: "{{ certbot_group |d('ssl-cert') }}"
    mode: g+rx
  tags: srv_postgres_ssl


- name: backup vanilla config
  ansible.builtin.command:
    argv:
      - cp
      - -a
      - "{{ srv_pg_conf_dir }}"
      - "{{ srv_pg_conf_dir }}.orig"
    creates: "{{ srv_pg_conf_dir }}.orig"
  tags: srv_postgres_config

- name: tweak postgres parameters
  community.general.ini_file:
    path: "{{ srv_pg_conf_dir }}/postgresql.conf"
    section: ""
    option: "{{ item.key }}"
    value: "{{ item.value }}\t\t# [ansible]"  # noqa no-tabs
    mode: 0644
  with_dict: "{{ srv_pg_parameters }}"
  loop_control:
    label: "{{ item.key | replace(\"'\", '') }}"
  notify:
    - restart postgres service
    - reset postgres admin password
  tags: srv_postgres_config

- name: ansible-managed header in postgresql.conf
  ansible.builtin.lineinfile:
    path: "{{ srv_pg_conf_dir }}/postgresql.conf"
    line: '# ansible-managed'
    insertbefore: BOF
  tags: srv_postgres_config


- name: configure postgres authentication
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ srv_pg_conf_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0640
  notify:
    - restart postgres service
    - reset postgres admin password
  tags: srv_postgres_config

- name: allow root to login as postgres locally
  ansible.builtin.lineinfile:
    path: "{{ srv_pg_conf_dir }}/pg_ident.conf"
    line: "root_postgres\t{{ item }}\t\tpostgres"  # noqa no-tabs
    owner: postgres
    group: postgres
    mode: 0640
  loop:
    - "root\t"
    - "postgres"
  notify:
    - restart postgres service
    - reset postgres admin password
  tags: srv_postgres_config


- name: enable postgres service
  ansible.builtin.systemd:
    name: "{{ srv_pg_service }}"
    state: started
    enabled: true
    daemon_reload: true
  tags: srv_postgres_service

- name: open postgres port in ufw
  community.general.ufw:
    rule: allow
    port: "{{ srv_pg_port |string }}"
    proto: tcp
  no_log: "{{ hide_secrets |bool }}"
  when: lin_firewall == 'ufw'
  tags:
    - srv_postgres_firewall

- name: open postgres port in ferm
  ivansible.base.ferm_port:
    port: "{{ srv_pg_port }}"
    proto: tcp
    comment: postgres
  when: lin_firewall == 'ferm'
  tags:
    - skip_ansible_lint
    - srv_postgres_firewall


- name: enable/disable postgres log compression
  ansible.builtin.replace:
    path: /etc/logrotate.d/postgresql-common
    regexp: "{{ lookbehind }}(compress|delaycompress)"
    replace: "{{ commentout }}\\1"
  vars:
    lookbehind: "{{ lin_compress_logs |bool |ternary('(?:#\\s*)','(?<!#)') }}"
    commentout: "{{ lin_compress_logs |bool |ternary('','#') }}"
  when: lin_compress_logs is not none
  tags: srv_postgres_logs


- name: notify postgres handlers now
  ansible.builtin.meta: flush_handlers
  tags: srv_postgres_service
...
